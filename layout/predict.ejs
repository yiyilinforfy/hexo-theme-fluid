<%
page.layout = 'predict'
page.title = theme.category.title || __('category.title')
%>

<main class="layout-page">
  <div class="main-inner">
    <div class="content-wrap">
      <article class="article-entry">
        <%- page.content %>
      </article>
      <span class="disclaimer">
        Disclaimer: The current predictions are generated by AI models analyzing the correlation between international gold price fluctuations and Bitcoin prices. These are for informational purposes only and should not be considered professional financial advice.
      </span>
    </div>
  </div>
</main>

<!-- Scripts -->
<script src="https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/markdown-it@13/dist/markdown-it.min.js"></script>
<script>
  const predictContainer = document.getElementById('predict-wrapper');
  const wrapper = document.getElementById('forecast-cards');
  const chartDom = document.getElementById('forecast-chart');
  const priceEl = document.getElementById('current-price');
  const fetchBtn = document.getElementById('fetch-forecast');
  const refreshBtn = document.getElementById('refresh-forecast');
  const submitBtn = document.getElementById('submit-advice');
  const assetInput = document.getElementById('asset-input');
  const adviceResult = document.getElementById('advice-result');
  const currentPriceBox = document.getElementById('current-price-box');
  const heroSection = document.getElementById('hero-section');
  const forecastLoading = document.getElementById('forecast-loading');
  const adviceLoading = document.getElementById('advice-loading');
  const adviceForm = document.getElementById('advice-form');
  const sloganText = document.getElementById('slogan-text');
  let btcPrice = {};
  let apiHost = 'https://api.zebi.ai'


  // Rotating Slogans
  const slogans = [
    "Unlock AI-driven Bitcoin price forecasts powered by gold price trends!",
    "Discover where BTC is headed with our advanced AI analytics.",
    "Stay ahead of the market with real-time BTC predictions.",
    "Harness the power of AI to predict BTC movements based on gold prices.",
    "Your gateway to smarter crypto investments starts here!"
  ];
  let currentSloganIndex = 0;
  function rotateSlogans() {
    sloganText.textContent = slogans[currentSloganIndex];
    sloganText.classList.add('fade-in');
    setTimeout(() => sloganText.classList.remove('fade-in'), 500);
    currentSloganIndex = (currentSloganIndex + 1) % slogans.length;
  }
  rotateSlogans();
  setInterval(rotateSlogans, 5000);


  let isDarkTheme = localStorage.getItem('theme') === 'dark' || window.matchMedia('(prefers-color-scheme: dark)').matches;

  // LocalStorage Cache Logic
  const CACHE_KEY = 'btc_forecast_data';
  const CACHE_DURATION = 60 * 60 * 1000; // 1 hour in milliseconds
  function getCachedData() {
    try {
      const cached = localStorage.getItem(CACHE_KEY);
      if (!cached) return null;
      const { data, timestamp } = JSON.parse(cached);
      if (Date.now() - timestamp > CACHE_DURATION) {
        localStorage.removeItem(CACHE_KEY);
        return null;
      }
      return data;
    } catch (e) {
      console.error('Error parsing cached data:', e);
      localStorage.removeItem(CACHE_KEY);
      return null;
    }
  }
  function setCachedData(data) {
    try {
      localStorage.setItem(CACHE_KEY, JSON.stringify({ data, timestamp: Date.now() }));
    } catch (e) {
      console.error('Error saving to LocalStorage:', e);
    }
  }

  // Display Forecast Data
  function displayForecast(result) {
    try {
      btcPrice = result.forecasts;
      const currentPrice = result.current_price;
      priceEl.textContent = `$${currentPrice.toFixed(2)}`;
      currentPriceBox.style.display = 'flex';
      adviceForm.style.display = 'block';
      heroSection.style.display = 'none';
      fetchBtn.style.display = 'none';
      wrapper.style.display = 'flex';
      // predictContainer.style.backgroundImage = "linear-gradient(to top, rgba(0, 0, 0, 0.4), rgba(247, 147, 26, 0.1)), url('/img/bitcoin.jpg')";
      forecastLoading.style.display = 'none';
      refreshBtn.style.display = 'inline-block';

      wrapper.innerHTML = Object.entries(btcPrice).map(([day, info]) => `
        <div class="forecast-card animate-pop">
          <h3>${day}-Day Forecast</h3>
          <p class="direction ${info.direction.includes('UP') ? 'up' : 'down'}">${info.direction}</p>
          <p class="price">$${info.price.toFixed(2)}</p>
          <p class="return">Return: ${(info.return * 100).toFixed(2)}%</p>
        </div>
      `).join('');

      forecasts = { ...btcPrice };
      forecasts['0'] = { direction: 'Current \u2191', price: currentPrice, return: 0 };
      
      chartDom.style.display = 'block';

      // ‚úÖ Á°Æ‰øù DOM Ê∏≤ÊüìÂÆåÊàêÂêéÂÜç init ÂõæË°®
      requestAnimationFrame(() => {
        const chart = echarts.init(chartDom, isDarkTheme ? 'dark' : null);
        chartDom.echartsInstance = chart;
        const option = {
          backgroundColor: 'transparent',
          title: {
            text: 'BTC Price Trend',
            subtext: 'Prediction at ' + new Date().toLocaleDateString(),
            left: 'center',
            top: 20,
            textStyle: { fontSize: 24, color: isDarkTheme ? '#fff' : '#333' }
          },
          tooltip: {
            trigger: 'axis',
            backgroundColor: isDarkTheme ? '#333' : '#fff',
            textStyle: { color: isDarkTheme ? '#fff' : '#333' }
          },
          xAxis: {
            type: 'category',
            name: 'Days',
            data: Object.keys(forecasts),
            axisLine: { lineStyle: { color: isDarkTheme ? '#666' : '#aaa' } },
            axisLabel: { color: isDarkTheme ? '#ccc' : '#333' }
          },
          yAxis: {
            type: 'value',
            name: 'BTC Price ($)',
            axisLine: { lineStyle: { color: isDarkTheme ? '#666' : '#aaa' } },
            axisLabel: { color: isDarkTheme ? '#ccc' : '#333' },
            splitLine: { lineStyle: { color: isDarkTheme ? '#444' : '#eee' } }
          },
          series: [{
            data: Object.values(forecasts).map(f => f.price.toFixed(2)),
            type: 'line',
            smooth: true,
            lineStyle: { color: '#f39c12', width: 3 },
            itemStyle: { color: '#e67e22' },
            areaStyle: {
              color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
                { offset: 0, color: 'rgba(243, 156, 18, 0.5)' },
                { offset: 1, color: 'rgba(243, 156, 18, 0)' }
              ])
            }
          }]
        };
        chart.setOption(option);
        chart.resize(); // ‰∏á‰∏ÄÊúâÂª∂ËøüÊ∏≤ÊüìÊÉÖÂÜµ
      });

    } catch (e) {
      console.error('Error displaying forecast:', e);
      wrapper.innerHTML = '<p class="error">‚ùå Error rendering forecast data.</p>';
    }
  }

  // Fetch Forecast Logic
  function fetchForecast() {
    // fetchBtn.disabled = true;
    adviceForm.style.display = 'none';
    heroSection.style.display = 'flex';
    currentPriceBox.style.display = 'none';
    chartDom.style.display = 'none';
    fetchBtn.textContent = 'Fetching...';
    refreshBtn.disabled = true; // Disable refresh button during fetch
    wrapper.style.display = 'flex';
    wrapper.innerHTML = '<div class="loading-spinner" id="forecast-loading"><div class="spinner"></div><p>üîÑ Fetching AI-Powered BTC Forecast...</p></div>';
    predictContainer.style.backgroundImage = ''
    forecastLoading.style.display = 'flex';
    refreshBtn.style.display = 'none';
    assetInput.value = '';
    
    fetch(apiHost + '/predict')
      .then(res => {
        if (!res.ok) throw new Error(`HTTP error! Status: ${res.status}`);
        return res.json();
      })
      .then(data => {
        if (!data.success || !data.result?.forecasts) {
          wrapper.innerHTML = '<p class="error">‚ùå Failed to load data</p>';
          throw new Error('Invalid API response');
        }
        setCachedData(data.result);
        displayForecast(data.result);
      })
      .catch(err => {
        console.error('Fetch forecast error:', err);
        wrapper.innerHTML = '<p class="error">‚ùå Error fetching data. Please try again.</p>';
      })
      .finally(() => {
        fetchBtn.disabled = false;
        fetchBtn.textContent = 'üöÄ Get BTC Price Forecast';
        refreshBtn.disabled = false;
      });
  }

  // Check for Cached Data on Load
  const cachedData = getCachedData();
  if (cachedData) {
    displayForecast(cachedData);
    fetchBtn.disabled = false; // Ensure button is clickable
    fetchBtn.textContent = 'üöÄ Get BTC Price Forecast';
  } else {
    fetchBtn.disabled = false; // Ensure button is clickable on initial load
    fetchBtn.textContent = 'üöÄ Get BTC Price Forecast';
  }

  // Fetch Forecast Button
  fetchBtn.addEventListener('click', fetchForecast);

  // Refresh Forecast Button
  refreshBtn.addEventListener('click', fetchForecast);

  submitBtn.addEventListener('click', () => {
      const input = assetInput.value.trim();
      adviceResult.innerHTML = '';
      if (!input) {
        adviceResult.innerHTML = '<p class="error">‚ö†Ô∏è Please enter your asset allocation.</p>';
        return;
      }

      submitBtn.disabled = true;
      submitBtn.textContent = 'üß† Generating...Please do not leave this page';

      adviceLoading.style.display = 'flex';
      adviceResult.innerHTML = `<div id="md-container" class="markdown-content animate-slide-in"></div>`;
      const md = window.markdownit();

      fetch(apiHost + '/plan-assets', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ user_assets: input, btc_forecast: btcPrice })
      })
        .then(res => {
          if (!res.ok) throw new Error(`HTTP error! Status: ${res.status}`);
          const reader = res.body.getReader();
          const decoder = new TextDecoder('utf-8');
          let partial = '';

          function read() {
            return reader.read().then(({ done, value }) => {
              if (done) {
                console.log("Done receiving stream");
                adviceLoading.style.display = 'none';
                return;
              }
              const chunk = decoder.decode(value, { stream: true });
              partial += chunk;
              document.getElementById('md-container').innerHTML = md.render(partial);
              return read();
            });
          }

          return read();
        })
        .catch(err => {
          console.error('Fetch advice error:', err);
          adviceLoading.style.display = 'none';
          adviceResult.innerHTML = '<p class="error">‚ùå Network or server error.</p>';
        })
        .finally(() => {
          submitBtn.disabled = false;
          submitBtn.textContent = 'üìä Get AI Investment Advice';
        });
    });

  // Update Chart Theme
  function updateChartTheme(chart, isDark) {
    try {
      const option = chart.getOption();
      option.backgroundColor = 'transparent';
      option.title[0].textStyle.color = isDark ? '#fff' : '#333';
      option.xAxis[0].axisLine.lineStyle.color = isDark ? '#666' : '#aaa';
      option.xAxis[0].axisLabel.color = isDark ? '#ccc' : '#333';
      option.yAxis[0].axisLine.lineStyle.color = isDark ? '#666' : '#aaa';
      option.yAxis[0].axisLabel.color = isDark ? '#ccc' : '#333';
      option.yAxis[0].splitLine.lineStyle.color = isDark ? '#444' : '#eee';
      option.tooltip[0].backgroundColor = isDark ? '#333' : '#fff';
      option.tooltip[0].textStyle.color = isDark ? '#fff' : '#333';
      chart.setOption(option);
    } catch (e) {
      console.error('Error updating chart theme:', e);
    }
  }
</script>
